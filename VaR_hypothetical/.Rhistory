ISONE = 1.9*1000
)
nuclear_capacity <- list(
IESO = 13.1*1000,
HydroQC = 0,
NYISO = 3.4*1000,
ISONE = 3.5*1000
)
# Calculate excess hydro capacity for each ISO
IESO$excess_renewable <- pmax(0, hydro_capacity$IESO - IESO$HYDRO)
HydroQC$excess_renewable <- pmax(0, hydro_capacity$HydroQC - HydroQC$Hydraulique)
NYISO$excess_renewable <- pmax(0, hydro_capacity$NYISO - NYISO$Hydro)
ISONE$excess_renewable <- pmax(0, hydro_capacity$ISONE - ISONE$Hydro)
# Create a dataframe on excess renewable capacity
excess_renewables <- IESO %>% select(time_utc, excess_renewable_IESO = excess_renewable) %>%
full_join(HydroQC %>% select(time_utc, excess_renewable_HydroQC = excess_renewable), by = "time_utc") %>%
full_join(NYISO %>% select(time_utc, excess_renewable_NYISO = excess_renewable), by = "time_utc") %>%
full_join(ISONE %>% select(time_utc, excess_renewable_ISONE = excess_renewable), by = "time_utc") %>%
mutate(excess_renewable_total = excess_renewable_IESO + excess_renewable_HydroQC
+ excess_renewable_NYISO + excess_renewable_ISONE)
# Function to replace fossil fuels
replace_fossil_fuel <- function(iso_list, fuel_types, excess_renewable_total_df) {
# Loop through each time period using time_utc in excess_renewable_total_df
for (t in seq_len(nrow(excess_renewable_total_df))) {
# Get the hydro capacity for this period
excess_renewable_t <- excess_renewable_total_df$excess_renewable_total[t]
# Get the time_utc for this period
time_utc_t <- excess_renewable_total_df$time_utc[t]
# Loop through each fuel type in the priority order (descending order of priority)
for (fuel_type in fuel_types) {
# Loop through each ISO (descending order of priority) to replace the given fuel type
for (i in seq_along(iso_list)) {
# Define the target ISO for fuel replacement
iso_data <- iso_list[[i]]
# Match the ISO current period using time_utc
matching_row <- which(iso_data$time_utc == time_utc_t)
# Only proceed if there's a matching time_utc
if (length(matching_row) == 1) {
# Identify the specific fossil fuel demand, setting it to 0 if not present
fuel_demand <- if (!is.null(iso_data[[fuel_type]][matching_row]) &&
!is.na(iso_data[[fuel_type]][matching_row]))
{iso_data[[fuel_type]][matching_row]} else {0}
# Determine how much of the fuel demand can be replaced by renewable
if (excess_renewable_t > 0) {
# Reduce either by the fuel demand or available renewable
fuel_reduction <- pmin(fuel_demand, excess_renewable_t)
# Reduce fuel demand by the amount of renewable used
iso_data[[fuel_type]][matching_row] <- fuel_demand - fuel_reduction
# Update renewable capacity for this period
excess_renewable_t <- excess_renewable_t - fuel_reduction
}
# Update the iso_list with the modified ISO data
iso_list[[i]] <- iso_data
}
}
}
}
return(iso_list)
}
# Define the list of fuel types in descending order of replacement priority
fuel_types <- c("coal_mw", "oil_mw", "dual_fuel_mw", "gas_mw")
excess_renewable_total <- na.omit(excess_renewables %>% select(time_utc, excess_renewable_total))
# ISO dataframes (descending replacement order) in a list
iso_list <- list(IESO, HydroQC, NYISO, ISONE)
# Apply the function to replace fossil fuels with excess renewable capacity
iso_list_cf <- replace_fossil_fuel(iso_list, fuel_types, excess_renewable_total)
# Unpack the updated ISO data
IESO_cf <- iso_list_cf[[1]]
HydroQC_cf <- iso_list_cf[[2]]
NYISO_cf <- iso_list_cf[[3]]
ISONE_cf <- iso_list_cf[[4]]
#### Create new variables based on fuel type ####
IESO <- IESO %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = WIND + SOLAR,
renewable_mw = variable_mw + HYDRO + NUCLEAR + BIOFUEL,
surplus_mw = renewable_mw - demand_ON,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018) %>% select(-c(demand_mkt, `Total Output`))
# HydroQC
HydroQC <- HydroQC %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Eolien + Solaire,
renewable_mw = variable_mw + Hydraulique + Autres,
surplus_mw = renewable_mw - load_QC,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018) %>% select(-c(Total))
# NYISO - Renaming fuel columns
NYISO <- NYISO %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Wind,
renewable_mw = variable_mw + Hydro + Nuclear + `Other Renewables`,
surplus_mw = renewable_mw - load_NY,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018)
# ISONE - Renaming fuel columns
ISONE <- ISONE %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Solar + Wind,
renewable_mw = variable_mw + Hydro + Nuclear + `Landfill Gas` + Refuse + Wood,
surplus_mw = renewable_mw - load_NE,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018)
View(ISONE)
View(NYISO)
View(IESO_cf)
View(ISONE_cf)
IESO_cf <- IESO_cf %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = WIND + SOLAR,
renewable_mw = variable_mw + HYDRO + NUCLEAR + BIOFUEL,
surplus_mw = renewable_mw - demand_ON,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018) %>% select(-c(demand_mkt, `Total Output`))
# HydroQC
HydroQC_cf <- HydroQC_cf %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Eolien + Solaire,
renewable_mw = variable_mw + Hydraulique + Autres,
surplus_mw = renewable_mw - load_QC,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018) %>% select(-c(Total))
# NYISO - Renaming fuel columns
NYISO_cf <- NYISO_cf %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Wind,
renewable_mw = variable_mw + Hydro + Nuclear + `Other Renewables`,
surplus_mw = renewable_mw - load_NY,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018)
# ISONE - Renaming fuel columns
ISONE_cf <- ISONE_cf %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Solar + Wind,
renewable_mw = variable_mw + Hydro + Nuclear + `Landfill Gas` + Refuse + Wood,
surplus_mw = renewable_mw - load_NE,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018)
View(ISONE_cf)
# Define a function to calculate fossil fuel reduction for any ISO
fossil_fuel_reduction <- function(iso_before, iso_after) {
# Join the two datasets on time_utc
iso_diff <- iso_before %>%
inner_join(iso_after, by = "time_utc", suffix = c("_before", "_after")) %>%
# Mutate to calculate the difference in each type of fossil fuel
mutate(
coal_diff = coal_mw_before - coal_mw_after,
oil_diff = oil_mw_before - oil_mw_after,
dual_fuel_diff = dual_fuel_mw_before - dual_fuel_mw_after,
gas_diff = gas_mw_before - gas_mw_after,
other_fossil_diff = other_fossil_mw_before - other_fossil_mw_after,
total_fossil_diff = coal_diff + oil_diff + dual_fuel_diff + gas_diff + other_fossil_diff
) %>%
select(time_utc, coal_diff, oil_diff, dual_fuel_diff, gas_diff, other_fossil_diff, total_fossil_diff)
return(iso_diff)
}
# Apply the function to IESO
IESO_diff <- fossil_fuel_reduction(IESO, IESO_cf)
View(IESO_diff)
HydroQC_diff <- fossil_fuel_reduction(HydroQC, HydroQC_cf)
NYISO_diff <- fossil_fuel_reduction(NYISO, NYISO_cf)
ISONE_diff <- fossil_fuel_reduction(ISONE, ISONE_cf)
View(HydroQC_diff)
View(ISONE_diff)
View(NYISO_diff)
# Combine the results into a single dataframe for all ISOs
fossil_fuel_diff_all_ISOs <- bind_rows(
IESO_diff %>% mutate(ISO = "IESO"),
HydroQC_diff %>% mutate(ISO = "HydroQC"),
NYISO_diff %>% mutate(ISO = "NYISO"),
ISONE_diff %>% mutate(ISO = "ISONE")
)
View(fossil_fuel_diff_all_ISOs)
# Combine all ISO differences into a single dataframe
combined_diff <- bind_rows(
IESO_diff %>% mutate(ISO = "IESO"),
HydroQC_diff %>% mutate(ISO = "HydroQC"),
NYISO_diff %>% mutate(ISO = "NYISO"),
ISONE_diff %>% mutate(ISO = "ISONE")
)
# Group by time_utc to calculate totals for each period
totals_by_period <- combined_diff %>%
group_by(time_utc) %>%
summarise(
total_coal_diff = sum(coal_diff, na.rm = TRUE),
total_oil_diff = sum(oil_diff, na.rm = TRUE),
total_dual_fuel_diff = sum(dual_fuel_diff, na.rm = TRUE),
total_gas_diff = sum(gas_diff, na.rm = TRUE),
total_other_fossil_diff = sum(other_fossil_diff, na.rm = TRUE),
total_fossil_diff = sum(total_fossil_diff, na.rm = TRUE)
)
View(totals_by_period)
# Combine all ISO differences into a single dataframe
combined_diff <-
# Group by time_utc to calculate totals for each period
total_fossil_reduction <- bind_rows(
IESO_diff %>% mutate(ISO = "IESO"),
HydroQC_diff %>% mutate(ISO = "HydroQC"),
NYISO_diff %>% mutate(ISO = "NYISO"),
ISONE_diff %>% mutate(ISO = "ISONE")
) %>%
group_by(time_utc) %>%
summarise(
total_coal_diff = sum(coal_diff, na.rm = TRUE),
total_oil_diff = sum(oil_diff, na.rm = TRUE),
total_dual_fuel_diff = sum(dual_fuel_diff, na.rm = TRUE),
total_gas_diff = sum(gas_diff, na.rm = TRUE),
total_other_fossil_diff = sum(other_fossil_diff, na.rm = TRUE),
total_fossil_diff = sum(total_fossil_diff, na.rm = TRUE)
)
View(total_fossil_reduction)
# Calculate total fossil fuel reduction by type across all ISOs
total_fossil_reduction <- bind_rows(
IESO_diff %>% mutate(ISO = "IESO"),
HydroQC_diff %>% mutate(ISO = "HydroQC"),
NYISO_diff %>% mutate(ISO = "NYISO"),
ISONE_diff %>% mutate(ISO = "ISONE")
) %>%
group_by(time_utc) %>%
summarise(
total_coal_diff = sum(coal_diff, na.rm = TRUE),
total_oil_diff = sum(oil_diff, na.rm = TRUE),
total_dual_fuel_diff = sum(dual_fuel_diff, na.rm = TRUE),
total_gas_diff = sum(gas_diff, na.rm = TRUE),
total_other_fossil_diff = sum(other_fossil_diff, na.rm = TRUE),
total_fossil_diff = sum(total_fossil_diff, na.rm = TRUE)
)
View(total_fossil_reduction)
# Calculate total fossil fuel reduction by type across all ISOs
total_fossil_reduction <- bind_rows(
IESO_diff %>% mutate(ISO = "IESO"),
HydroQC_diff %>% mutate(ISO = "HydroQC"),
NYISO_diff %>% mutate(ISO = "NYISO"),
ISONE_diff %>% mutate(ISO = "ISONE")
) %>%
group_by(time_utc) %>%
summarise(
total_coal_diff = sum(coal_diff, na.rm = TRUE),
total_oil_diff = sum(oil_diff, na.rm = TRUE),
total_dual_fuel_diff = sum(dual_fuel_diff, na.rm = TRUE),
total_gas_diff = sum(gas_diff, na.rm = TRUE),
total_other_fossil_diff = sum(other_fossil_diff, na.rm = TRUE),
total_fossil_diff = sum(total_fossil_diff, na.rm = TRUE),
.groups = "drop"
)
# Calculate total hydro production from all ISOs
total_hydro_production <-
IESO %>% select(time_utc, hydro_IESO = HYDRO) %>%
left_join(HydroQC %>% select(time_utc, hydro_HydroQC = Hydraulique), by = "time_utc") %>%
left_join(NYISO %>% select(time_utc, hydro_NYISO = Hydro), by = "time_utc") %>%
left_join(ISONE %>% select(time_utc, hydro_ISONE = Hydro), by = "time_utc") %>%
mutate(hydro_total = hydro_IESO + hydro_HydroQC + hydro_NYISO + hydro_ISONE)
View(total_hydro_production)
# Calculate the excess capacity used as a percentage of total current hydro production
total_fossil_reduction <- total_fossil_reduction %>%
left_join(total_hydro_production %>% select(time_utc, hydro_total), by = "time_utc") %>%
mutate(hydro_chg_prct = (total_fossil_diff/hydro_total))
View(total_fossil_reduction)
IESO_cf <- IESO_cf %>%
left_join(total_fossil_reduction %>% select(time_utc, hydro_chg_prct), by = "time_utc") %>%
mutate(fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = WIND + SOLAR,
renewable_mw = variable_mw + HYDRO*(1.0+hydro_chg_prct) + NUCLEAR + BIOFUEL,
surplus_mw = renewable_mw - demand_ON,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018) %>% select(-c(demand_mkt, `Total Output`))
rm(list = ls())
library(dplyr)
library(lubridate)
library(zoo)
library(VineCopula)
library(rugarch)
library(sn)
library(forecast)
library(foreach)
library(doParallel)
library(ggplot2)
#### Program configuration ####
# Set random seed
set.seed(831114)
# Specify the number of CPU cores you want to use
num_cores <- 3 #detectCores() -1
# Register a parallel back-end
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Get the number of cores in the cluster
num_cores_in_cluster <- getDoParWorkers()
cat("Number of cores in the cluster:", num_cores_in_cluster, "\n")
# Record the start time
start_time <- Sys.time()
#### Load ISO data ####
load("../ON/IESO.RData")
load("../QC/HydroQC.RData")
load("../NY/NYISO.RData")
load("../NE/ISONE.RData")
#### Standardize fossil fuel names across all ISOs ####
IESO <- IESO %>%
rename(gas_mw = GAS) %>%
mutate(coal_mw = 0,
oil_mw = 0,
dual_fuel_mw = 0,
other_fossil_mw = 0)
HydroQC <- HydroQC %>%
rename(gas_mw = Thermique) %>%
mutate(coal_mw = 0,
oil_mw = 0,
dual_fuel_mw = 0,
other_fossil_mw = 0)
NYISO <- NYISO %>%
rename(gas_mw = `Natural Gas`,
dual_fuel_mw = `Dual Fuel`,
other_fossil_mw = `Other Fossil Fuels`) %>%
mutate(coal_mw = 0,
oil_mw = 0)
ISONE <- ISONE %>%
rename(gas_mw = `Natural Gas`,
oil_mw = Oil,
coal_mw = Coal) %>%
mutate(dual_fuel_mw = 0,
other_fossil_mw = 0)
#### Counterfactual Calculation on fossil fuel energy needed ####
# Define hydro capacity limits for each ISO
hydro_capacity <- list(
IESO = 8922,
HydroQC = 41487,
NYISO = (4265.3 + 4207.2)/2,
ISONE = 1.9*1000
)
nuclear_capacity <- list(
IESO = 13.1*1000,
HydroQC = 0,
NYISO = 3.4*1000,
ISONE = 3.5*1000
)
# Calculate excess renewable capacity for each ISO
IESO$excess_renewable <- pmax(0, hydro_capacity$IESO - IESO$HYDRO)
HydroQC$excess_renewable <- pmax(0, hydro_capacity$HydroQC - HydroQC$Hydraulique)
NYISO$excess_renewable <- pmax(0, hydro_capacity$NYISO - NYISO$Hydro)
ISONE$excess_renewable <- pmax(0, hydro_capacity$ISONE - ISONE$Hydro)
# Combine ISO excess renewable capacities to a dataframe
excess_renewables <- IESO %>% select(time_utc, excess_renewable_IESO = excess_renewable) %>%
full_join(HydroQC %>% select(time_utc, excess_renewable_HydroQC = excess_renewable), by = "time_utc") %>%
full_join(NYISO %>% select(time_utc, excess_renewable_NYISO = excess_renewable), by = "time_utc") %>%
full_join(ISONE %>% select(time_utc, excess_renewable_ISONE = excess_renewable), by = "time_utc") %>%
mutate(excess_renewable_total = excess_renewable_IESO + excess_renewable_HydroQC
+ excess_renewable_NYISO + excess_renewable_ISONE)
# Function to replace fossil fuels
replace_fossil_fuel <- function(iso_list, fuel_types, excess_renewable_total_df) {
# Loop through each time period using time_utc in excess_renewable_total_df
for (t in seq_len(nrow(excess_renewable_total_df))) {
# Get the hydro capacity for this period
excess_renewable_t <- excess_renewable_total_df$excess_renewable_total[t]
# Get the time_utc for this period
time_utc_t <- excess_renewable_total_df$time_utc[t]
# Loop through each fuel type in the priority order (descending order of priority)
for (fuel_type in fuel_types) {
# Loop through each ISO (descending order of priority) to replace the given fuel type
for (i in seq_along(iso_list)) {
# Define the target ISO for fuel replacement
iso_data <- iso_list[[i]]
# Match the ISO current period using time_utc
matching_row <- which(iso_data$time_utc == time_utc_t)
# Only proceed if there's a matching time_utc
if (length(matching_row) == 1) {
# Identify the specific fossil fuel demand, setting it to 0 if not present
fuel_demand <- if (!is.null(iso_data[[fuel_type]][matching_row]) &&
!is.na(iso_data[[fuel_type]][matching_row]))
{iso_data[[fuel_type]][matching_row]} else {0}
# Determine how much of the fuel demand can be replaced by renewable
if (excess_renewable_t > 0) {
# Reduce either by the fuel demand or available renewable
fuel_reduction <- pmin(fuel_demand, excess_renewable_t)
# Reduce fuel demand by the amount of renewable used
iso_data[[fuel_type]][matching_row] <- fuel_demand - fuel_reduction
# Update renewable capacity for this period
excess_renewable_t <- excess_renewable_t - fuel_reduction
}
# Update the iso_list with the modified ISO data
iso_list[[i]] <- iso_data
}
}
}
}
return(iso_list)
}
# Define the list of fuel types in descending order of replacement priority
fuel_types <- c("coal_mw", "oil_mw", "dual_fuel_mw", "gas_mw")
# Define the excess renewable inputs
excess_renewable_total <- na.omit(excess_renewables %>% select(time_utc, excess_renewable_total))
# ISO dataframes (descending replacement order) in a list
iso_list <- list(IESO, HydroQC, NYISO, ISONE)
# Apply the function to replace fossil fuels with excess renewable capacity
iso_list_cf <- replace_fossil_fuel(iso_list, fuel_types, excess_renewable_total)
# Unpack the updated ISO data
IESO_cf <- iso_list_cf[[1]]
HydroQC_cf <- iso_list_cf[[2]]
NYISO_cf <- iso_list_cf[[3]]
ISONE_cf <- iso_list_cf[[4]]
#### Calculate reduction in fossil fuel use and increase in renewable use ####
# Define a function to calculate fossil fuel reduction for any ISO
fossil_fuel_reduction <- function(iso_before, iso_after) {
# Join the two datasets on time_utc
iso_diff <- iso_before %>%
inner_join(iso_after, by = "time_utc", suffix = c("_before", "_after")) %>%
# Mutate to calculate the difference in each type of fossil fuel
mutate(
coal_diff = coal_mw_before - coal_mw_after,
oil_diff = oil_mw_before - oil_mw_after,
dual_fuel_diff = dual_fuel_mw_before - dual_fuel_mw_after,
gas_diff = gas_mw_before - gas_mw_after,
other_fossil_diff = other_fossil_mw_before - other_fossil_mw_after,
total_fossil_diff = coal_diff + oil_diff + dual_fuel_diff + gas_diff + other_fossil_diff
) %>%
select(time_utc, coal_diff, oil_diff, dual_fuel_diff, gas_diff, other_fossil_diff, total_fossil_diff)
return(iso_diff)
}
# Apply the function to IESO
IESO_diff <- fossil_fuel_reduction(IESO, IESO_cf)
HydroQC_diff <- fossil_fuel_reduction(HydroQC, HydroQC_cf)
NYISO_diff <- fossil_fuel_reduction(NYISO, NYISO_cf)
ISONE_diff <- fossil_fuel_reduction(ISONE, ISONE_cf)
# Calculate total fossil fuel reduction by type across all ISOs
total_fossil_reduction <- bind_rows(
IESO_diff %>% mutate(ISO = "IESO"),
HydroQC_diff %>% mutate(ISO = "HydroQC"),
NYISO_diff %>% mutate(ISO = "NYISO"),
ISONE_diff %>% mutate(ISO = "ISONE")
) %>%
group_by(time_utc) %>%
summarise(
total_coal_diff = sum(coal_diff, na.rm = TRUE),
total_oil_diff = sum(oil_diff, na.rm = TRUE),
total_dual_fuel_diff = sum(dual_fuel_diff, na.rm = TRUE),
total_gas_diff = sum(gas_diff, na.rm = TRUE),
total_other_fossil_diff = sum(other_fossil_diff, na.rm = TRUE),
total_fossil_diff = sum(total_fossil_diff, na.rm = TRUE),
.groups = "drop"
)
# Calculate total hydro production from all ISOs
total_hydro_production <-
IESO %>% select(time_utc, hydro_IESO = HYDRO) %>%
left_join(HydroQC %>% select(time_utc, hydro_HydroQC = Hydraulique), by = "time_utc") %>%
left_join(NYISO %>% select(time_utc, hydro_NYISO = Hydro), by = "time_utc") %>%
left_join(ISONE %>% select(time_utc, hydro_ISONE = Hydro), by = "time_utc") %>%
mutate(hydro_total = hydro_IESO + hydro_HydroQC + hydro_NYISO + hydro_ISONE)
# Calculate the excess capacity used as a percentage of total current hydro production
total_fossil_reduction <- total_fossil_reduction %>%
left_join(total_hydro_production %>% select(time_utc, hydro_total), by = "time_utc") %>%
mutate(hydro_chg_prct = (total_fossil_diff/hydro_total))
# Create/update new variables based on fuel type
IESO_cf <- IESO_cf %>%
left_join(total_fossil_reduction %>% select(time_utc, hydro_chg_prct), by = "time_utc") %>%
mutate(HYDRO = HYDRO*(1.0+hydro_chg_prct),
fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = WIND + SOLAR,
renewable_mw = variable_mw + HYDRO + NUCLEAR + BIOFUEL,
surplus_mw = renewable_mw - demand_ON,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018) %>% select(-c(demand_mkt, `Total Output`))
# HydroQC
HydroQC_cf <- HydroQC_cf %>%
left_join(total_fossil_reduction %>% select(time_utc, hydro_chg_prct), by = "time_utc") %>%
mutate(Hydraulique = Hydraulique*(1.0+hydro_chg_prct),
fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Eolien + Solaire,
renewable_mw = variable_mw + Hydraulique + Autres,
surplus_mw = renewable_mw - load_QC,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018) %>% select(-c(Total))
# NYISO
NYISO_cf <- NYISO_cf %>%
left_join(total_fossil_reduction %>% select(time_utc, hydro_chg_prct), by = "time_utc") %>%
mutate(Hydro = Hydro*(1.0+hydro_chg_prct),
fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Wind,
renewable_mw = variable_mw + Hydro + Nuclear + `Other Renewables`,
surplus_mw = renewable_mw - load_NY,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018)
# ISONE
ISONE_cf <- ISONE_cf %>%
left_join(total_fossil_reduction %>% select(time_utc, hydro_chg_prct), by = "time_utc") %>%
mutate(Hydro = Hydro*(1.0+hydro_chg_prct),
fossil_mw = coal_mw + oil_mw + dual_fuel_mw + gas_mw + other_fossil_mw,
variable_mw = Solar + Wind,
renewable_mw = variable_mw + Hydro + Nuclear + `Landfill Gas` + Refuse + Wood,
surplus_mw = renewable_mw - load_NE,
total_mw = renewable_mw + fossil_mw) %>%
filter(year(time) > 2018)
# Perform all inner joins in a single pipeline
renewable_surplus <-
IESO_cf %>% select(time_utc, surplus_mw) %>%
inner_join(NYISO_cf %>% select(time_utc, surplus_mw), by = "time_utc", suffix = c(".IESO", ".NYISO")) %>%
inner_join(ISONE_cf %>% select(time_utc, surplus_mw), by = "time_utc") %>%
inner_join(HydroQC_cf %>% select(time_utc, surplus_mw), by = "time_utc", suffix = c(".ISONE", ".HydroQC")) %>%
mutate(
year = factor(year(time_utc)),
month = factor(month(time_utc)),
week = factor(week(time_utc)),
wday = factor(wday(time_utc)),
hour = factor(hour(time_utc))
)
View(renewable_surplus)
View(IESO_cf)
View(ISONE_cf)
View(ISONE)
View(IESO)
View(IESO_diff)
View(ISONE_diff)
source("C:/Users/atyho/Dropbox/eletricity_data/VaR_hypothetical/VaR.R")
View(data.estimate)
save.image(file="VaR.RData")
